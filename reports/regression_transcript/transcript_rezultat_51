# 1
# Model Technology ModelSim - Intel FPGA Edition vlog 10.5b Compiler 2016.10 Oct  5 2016
# Start time: 15:50:37 on Apr 16,2024
# vlog -sv -timescale 1ps/1ps -work work -f sources.txt 
# -- Compiling package instr_register_pkg
# -- Compiling module instr_register
# -- Importing package instr_register_pkg
# -- Compiling module instr_register_test
# -- Compiling module top
# 
# Top level modules:
# 	top
# End time: 15:50:37 on Apr 16,2024, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# vsim -novopt -quiet -nocoverage "+notimingchecks" "+nowarnTSCALE" -sva top -GTEST_NAME=case_51 -GSEED_VALUE=1599618 -GWRITE_ORDER=2 -GWRITE_NR=50 -GREAD_ORDER=2 -GREAD_NR=32 
# Start time: 15:50:37 on Apr 16,2024
# 
# Writing values to register stack...
# write_pointer :  4
# Writing to register location 4: 
#   opcode = 6 (DIV)
#   operand_a = 2
#   operand_b = 1
# 
# write_pointer :  1
# Writing to register location 1: 
#   opcode = 1 (PASSA)
#   operand_a = -15
#   operand_b = 1
# 
# write_pointer :  19
# Writing to register location 19: 
#   opcode = 4 (SUB)
#   operand_a = -13
#   operand_b = 7
# 
# write_pointer :  23
# Writing to register location 23: 
#   opcode = 0 (ZERO)
#   operand_a = -9
#   operand_b = 5
# 
# write_pointer :  7
# Writing to register location 7: 
#   opcode = 4 (SUB)
#   operand_a = -9
#   operand_b = 8
# 
# write_pointer :  30
# Writing to register location 30: 
#   opcode = 3 (ADD)
#   operand_a = -2
#   operand_b = 8
# 
# write_pointer :  7
# Writing to register location 7: 
#   opcode = 1 (PASSA)
#   operand_a = 7
#   operand_b = 1
# 
# write_pointer :  23
# Writing to register location 23: 
#   opcode = 4 (SUB)
#   operand_a = -9
#   operand_b = 8
# 
# write_pointer :  22
# Writing to register location 22: 
#   opcode = 3 (ADD)
#   operand_a = 6
#   operand_b = 5
# 
# write_pointer :  21
# Writing to register location 21: 
#   opcode = 3 (ADD)
#   operand_a = 5
#   operand_b = 15
# 
# write_pointer :  6
# Writing to register location 6: 
#   opcode = 3 (ADD)
#   operand_a = 6
#   operand_b = 5
# 
# write_pointer :  29
# Writing to register location 29: 
#   opcode = 6 (DIV)
#   operand_a = 13
#   operand_b = 1
# 
# write_pointer :  9
# Writing to register location 9: 
#   opcode = 6 (DIV)
#   operand_a = -7
#   operand_b = 6
# 
# write_pointer :  19
# Writing to register location 19: 
#   opcode = 5 (MULT)
#   operand_a = -13
#   operand_b = 15
# 
# write_pointer :  22
# Writing to register location 22: 
#   opcode = 2 (PASSB)
#   operand_a = -10
#   operand_b = 1
# 
# write_pointer :  2
# Writing to register location 2: 
#   opcode = 6 (DIV)
#   operand_a = 2
#   operand_b = 6
# 
# write_pointer :  15
# Writing to register location 15: 
#   opcode = 1 (PASSA)
#   operand_a = 15
#   operand_b = 7
# 
# write_pointer :  27
# Writing to register location 27: 
#   opcode = 5 (MULT)
#   operand_a = 11
#   operand_b = 4
# 
# write_pointer :  24
# Writing to register location 24: 
#   opcode = 6 (DIV)
#   operand_a = -8
#   operand_b = 6
# 
# write_pointer :  18
# Writing to register location 18: 
#   opcode = 5 (MULT)
#   operand_a = -14
#   operand_b = 1
# 
# write_pointer :  10
# Writing to register location 10: 
#   opcode = 5 (MULT)
#   operand_a = -6
#   operand_b = 2
# 
# write_pointer :  23
# Writing to register location 23: 
#   opcode = 6 (DIV)
#   operand_a = 7
#   operand_b = 9
# 
# write_pointer :  13
# Writing to register location 13: 
#   opcode = 5 (MULT)
#   operand_a = -3
#   operand_b = 4
# 
# write_pointer :  23
# Writing to register location 23: 
#   opcode = 5 (MULT)
#   operand_a = 7
#   operand_b = 14
# 
# write_pointer :  30
# Writing to register location 30: 
#   opcode = 4 (SUB)
#   operand_a = 14
#   operand_b = 4
# 
# write_pointer :  7
# Writing to register location 7: 
#   opcode = 5 (MULT)
#   operand_a = -9
#   operand_b = 13
# 
# write_pointer :  26
# Writing to register location 26: 
#   opcode = 1 (PASSA)
#   operand_a = -6
#   operand_b = 13
# 
# write_pointer :  20
# Writing to register location 20: 
#   opcode = 7 (MOD)
#   operand_a = -12
#   operand_b = 11
# 
# write_pointer :  15
# Writing to register location 15: 
#   opcode = 7 (MOD)
#   operand_a = 15
#   operand_b = 6
# 
# write_pointer :  3
# Writing to register location 3: 
#   opcode = 0 (ZERO)
#   operand_a = 3
#   operand_b = 15
# 
# write_pointer :  25
# Writing to register location 25: 
#   opcode = 0 (ZERO)
#   operand_a = 9
#   operand_b = 5
# 
# write_pointer :  12
# Writing to register location 12: 
#   opcode = 0 (ZERO)
#   operand_a = -4
#   operand_b = 5
# 
# write_pointer :  28
# Writing to register location 28: 
#   opcode = 6 (DIV)
#   operand_a = -4
#   operand_b = 12
# 
# write_pointer :  9
# Writing to register location 9: 
#   opcode = 0 (ZERO)
#   operand_a = -7
#   operand_b = 12
# 
# write_pointer :  3
# Writing to register location 3: 
#   opcode = 2 (PASSB)
#   operand_a = 3
#   operand_b = 4
# 
# write_pointer :  3
# Writing to register location 3: 
#   opcode = 5 (MULT)
#   operand_a = 3
#   operand_b = 8
# 
# write_pointer :  7
# Writing to register location 7: 
#   opcode = 6 (DIV)
#   operand_a = -9
#   operand_b = 12
# 
# write_pointer :  26
# Writing to register location 26: 
#   opcode = 2 (PASSB)
#   operand_a = -6
#   operand_b = 1
# 
# write_pointer :  10
# Writing to register location 10: 
#   opcode = 5 (MULT)
#   operand_a = -6
#   operand_b = 13
# 
# write_pointer :  2
# Writing to register location 2: 
#   opcode = 6 (DIV)
#   operand_a = 2
#   operand_b = 9
# 
# write_pointer :  13
# Writing to register location 13: 
#   opcode = 0 (ZERO)
#   operand_a = -3
#   operand_b = 3
# 
# write_pointer :  3
# Writing to register location 3: 
#   opcode = 7 (MOD)
#   operand_a = -13
#   operand_b = 3
# 
# write_pointer :  2
# Writing to register location 2: 
#   opcode = 4 (SUB)
#   operand_a = 2
#   operand_b = 3
# 
# write_pointer :  10
# Writing to register location 10: 
#   opcode = 3 (ADD)
#   operand_a = 10
#   operand_b = 4
# 
# write_pointer :  13
# Writing to register location 13: 
#   opcode = 6 (DIV)
#   operand_a = -3
#   operand_b = 14
# 
# write_pointer :  16
# Writing to register location 16: 
#   opcode = 1 (PASSA)
#   operand_a = 0
#   operand_b = 8
# 
# write_pointer :  16
# Writing to register location 16: 
#   opcode = 3 (ADD)
#   operand_a = 0
#   operand_b = 15
# 
# write_pointer :  8
# Writing to register location 8: 
#   opcode = 1 (PASSA)
#   operand_a = 8
#   operand_b = 9
# 
# write_pointer :  27
# Writing to register location 27: 
#   opcode = 5 (MULT)
#   operand_a = -5
#   operand_b = 4
# 
# write_pointer :  31
# Writing to register location 31: 
#   opcode = 3 (ADD)
#   operand_a = 15
#   operand_b = 3
# 
# 
# Reading back the same register locations written...
# Read pointer: 10 
# Read from register location 0: 
#   opcode = x ()
#   operand_a = x
#   operand_b = x
# 
#   result = x
# 
#   Time:                  554
# Read pointer: 12 
# Read from register location 1: 
#   opcode = 1 (PASSA)
#   operand_a = -15
#   operand_b = 1
# 
#   result = -15
# 
#   Time:                  574
# Read pointer: 30 
# Read from register location 2: 
#   opcode = 4 (SUB)
#   operand_a = 2
#   operand_b = 3
# 
#   result = -1
# 
#   Time:                  594
# Read pointer: 17 
# Read from register location 3: 
#   opcode = 7 (MOD)
#   operand_a = -13
#   operand_b = 3
# 
#   result = -1
# 
#   Time:                  614
# Read pointer: 23 
# Read from register location 4: 
#   opcode = 6 (DIV)
#   operand_a = 2
#   operand_b = 1
# 
#   result = 2
# 
#   Time:                  634
# Read pointer: 8 
# Read from register location 5: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   result = 0
# 
#   Time:                  654
# Read pointer: 6 
# Read from register location 6: 
#   opcode = 3 (ADD)
#   operand_a = 6
#   operand_b = 5
# 
#   result = 11
# 
#   Time:                  674
# Read pointer: 14 
# Read from register location 7: 
#   opcode = 6 (DIV)
#   operand_a = -9
#   operand_b = 12
# 
#   result = 0
# 
#   Time:                  694
# Read pointer: 11 
# Read from register location 8: 
#   opcode = 1 (PASSA)
#   operand_a = 8
#   operand_b = 9
# 
#   result = 8
# 
#   Time:                  714
# Read pointer: 16 
# Read from register location 9: 
#   opcode = 0 (ZERO)
#   operand_a = -7
#   operand_b = 12
# 
#   result = 0
# 
#   Time:                  734
# Read pointer: 25 
# Read from register location 10: 
#   opcode = 3 (ADD)
#   operand_a = 10
#   operand_b = 4
# 
#   result = 14
# 
#   Time:                  754
# Read pointer: 2 
# Read from register location 11: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   result = 0
# 
#   Time:                  774
# Read pointer: 17 
# Read from register location 12: 
#   opcode = 0 (ZERO)
#   operand_a = -4
#   operand_b = 5
# 
#   result = 0
# 
#   Time:                  794
# Read pointer: 25 
# Read from register location 13: 
#   opcode = 6 (DIV)
#   operand_a = -3
#   operand_b = 14
# 
#   result = 0
# 
#   Time:                  814
# Read pointer: 30 
# Read from register location 14: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   result = 0
# 
#   Time:                  834
# Read pointer: 16 
# Read from register location 15: 
#   opcode = 7 (MOD)
#   operand_a = 15
#   operand_b = 6
# 
#   result = 3
# 
#   Time:                  854
# Read pointer: 22 
# Read from register location 16: 
#   opcode = 3 (ADD)
#   operand_a = 0
#   operand_b = 15
# 
#   result = 15
# 
#   Time:                  874
# Read pointer: 25 
# Read from register location 17: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   result = 0
# 
#   Time:                  894
# Read pointer: 3 
# Read from register location 18: 
#   opcode = 5 (MULT)
#   operand_a = -14
#   operand_b = 1
# 
#   result = -14
# 
#   Time:                  914
# Read pointer: 7 
# Read from register location 19: 
#   opcode = 5 (MULT)
#   operand_a = -13
#   operand_b = 15
# 
#   result = -195
# 
#   Time:                  934
# Read pointer: 31 
# Read from register location 20: 
#   opcode = 7 (MOD)
#   operand_a = -12
#   operand_b = 11
# 
#   result = -1
# 
#   Time:                  954
# Read pointer: 5 
# Read from register location 21: 
#   opcode = 3 (ADD)
#   operand_a = 5
#   operand_b = 15
# 
#   result = 20
# 
#   Time:                  974
# Read pointer: 15 
# Read from register location 22: 
#   opcode = 2 (PASSB)
#   operand_a = -10
#   operand_b = 1
# 
#   result = 1
# 
#   Time:                  994
# Read pointer: 7 
# Read from register location 23: 
#   opcode = 5 (MULT)
#   operand_a = 7
#   operand_b = 14
# 
#   result = 98
# 
#   Time:                 1014
# Read pointer: 4 
# Read from register location 24: 
#   opcode = 6 (DIV)
#   operand_a = -8
#   operand_b = 6
# 
#   result = -1
# 
#   Time:                 1034
# Read pointer: 27 
# Read from register location 25: 
#   opcode = 0 (ZERO)
#   operand_a = 9
#   operand_b = 5
# 
#   result = 0
# 
#   Time:                 1054
# Read pointer: 2 
# Read from register location 26: 
#   opcode = 2 (PASSB)
#   operand_a = -6
#   operand_b = 1
# 
#   result = 1
# 
#   Time:                 1074
# Read pointer: 21 
# Read from register location 27: 
#   opcode = 5 (MULT)
#   operand_a = -5
#   operand_b = 4
# 
#   result = -20
# 
#   Time:                 1094
# Read pointer: 10 
# Read from register location 28: 
#   opcode = 6 (DIV)
#   operand_a = -4
#   operand_b = 12
# 
#   result = 0
# 
#   Time:                 1114
# Read pointer: 26 
# Read from register location 29: 
#   opcode = 6 (DIV)
#   operand_a = 13
#   operand_b = 1
# 
#   result = 13
# 
#   Time:                 1134
# Read pointer: 6 
# Read from register location 30: 
#   opcode = 4 (SUB)
#   operand_a = 14
#   operand_b = 4
# 
#   result = 10
# 
#   Time:                 1154
# Read pointer: 11 
# Read from register location 31: 
#   opcode = 3 (ADD)
#   operand_a = 15
#   operand_b = 3
# 
#   result = 18
# 
#   Time:                 1174
# Read pointer: 1 
# Read from register location 0: 
#   opcode = x ()
#   operand_a = x
#   operand_b = x
# 
#   result = x
# 
#   Time:                 1194
# 
# ***********************************************************
# ***                       STATISTISCS                  ***
# ***           READ_ORDER = 2 ,  WRITE_ORDER = 2     ***
# ***           TESTS FAILED = 0  TOTAL_TESTS =  32    ***
# ***********************************************************
# 
# ** Note: $finish    : ../lab01_testbench_interface/instr_register_test.sv(100)
#    Time: 1206 ns  Iteration: 1  Instance: /top/test
# End time: 15:50:38 on Apr 16,2024, Elapsed time: 0:00:01
# Errors: 0, Warnings: 0
